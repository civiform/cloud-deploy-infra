#! /usr/bin/env bash

source "cloud/azure/bin/lib.sh"

readonly POSTGRES_PASSWORD_NAME="postgres-password"
readonly APP_SECRET_KEY_NAME="app-secret-key"
readonly API_SECRET_SALT_NAME="api-secret-salt"
readonly ADFS_SECRET_NAME="adfs-secret"
readonly ADFS_CLIENT_ID="adfs-client-id"
readonly ADFS_DISCOVERY_URI="adfs-discovery-uri"
readonly TEMPORARY_SECRET="CHANGE ME"

# DOC: Create key vault instance, set permissions, and generate and set secrets

while getopts g:v:l: flag; do
  case "${flag}" in
    g) resource_group="${OPTARG}" ;;
    v) vault_name="${OPTARG}" ;;
    l) location="${OPTARG}" ;;
    *) out::error "Unexpected getopts value ${flag}" ;;
  esac
done

readonly resource_group
readonly vault_name
readonly location

if [[ ! "${resource_group}" ]] \
  || [[ ! "${vault_name}" ]] \
  || [[ ! "${location}" ]]; then
  out::error "arguments -g, -v, and -l must be provided"
  exit 1
fi

echo "Creating resource group ${resource_group}"
azure::create_resource_group "${resource_group}" "${location}"

if key_vault::check_if_vault_exists "${resource_group}" "${vault_name}"; then
  echo "Key vault ${vault_name} already exists in resource group ${resource_group}"
else
  echo "Creating key vault ${vault_name}"
  key_vault::create_vault "${resource_group}" "${location}" "${vault_name}"
fi

echo "Adding key vault secrets officer role to signed in user"
key_vault::assign_secrets_officer_role_to_user "${resource_group}"

echo "Generating and setting secrets"
  # [[ $SECRET_RESULT =~ "SecretNotFound" ]] && echo "False" || echo "True"

POSTGRES_PASSWORD_VALUE=$(key_vault::has_secret "${vault_name}" "${POSTGRES_PASSWORD_NAME}")
if [[ "$POSTGRES_PASSWORD_VALUE" =~ "SecretNotFound" ]]; then
  key_vault::add_generated_secrets \
    "${vault_name}" \
    "${POSTGRES_PASSWORD_NAME}"
else
  echo "Key ${POSTGRES_PASSWORD_NAME} exists in the secret store"
fi

APP_SECRET_KEY_VALUE=$(key_vault::has_secret "${vault_name}" "${APP_SECRET_KEY_NAME}")
if [[ "$APP_SECRET_KEY_VALUE" =~ "SecretNotFound" ]]; then
  key_vault::add_generated_secrets \
    "${vault_name}" \
    "${APP_SECRET_KEY_NAME}"
else
  echo "Key ${APP_SECRET_KEY_NAME} exists in the secret store"
fi

API_SECRET_SALT_NAME_VALUE=$(key_vault::has_secret "${vault_name}" "${API_SECRET_SALT_NAME}")
if [[ "$API_SECRET_SALT_NAME_VALUE" =~ "SecretNotFound" ]]; then
  key_vault::add_generated_secrets \
    "${vault_name}" \
    "${API_SECRET_SALT_NAME}"
else
  echo "Key ${API_SECRET_SALT_NAME} exists in the secret store"
fi

echo "Adding placeholder values for secrets we set later"
ADFS_SECRET_NAME_VALUE=$(key_vault::has_secret "${vault_name}" "${ADFS_SECRET_NAME}")
if [[ "$ADFS_SECRET_NAME_VALUE" =~ "SecretNotFound" ]]; then
  key_vault::add_secret \
    "${vault_name}" \
    "${ADFS_SECRET_NAME}" \
    "${TEMPORARY_SECRET}" 
else
  echo "Key ${ADFS_SECRET_NAME} exists in the secret store"
fi

ADFS_CLIENT_ID_VALUE=$(key_vault::has_secret "${vault_name}" "${ADFS_CLIENT_ID}")
if [[ "$ADFS_CLIENT_ID_VALUE" =~ "SecretNotFound" ]]; then
  key_vault::add_secret \
    "${vault_name}" \
    "${ADFS_CLIENT_ID}" \
    "${TEMPORARY_SECRET}"
else
  echo "Key ${ADFS_CLIENT_ID} exists in the secret store"
fi
ADFS_DISCOVERY_URI_VALUE=$(key_vault::has_secret "${vault_name}" "${ADFS_DISCOVERY_URI}")
if [[ "$ADFS_DISCOVERY_URI_VALUE" =~ "SecretNotFound" ]]; then
  key_vault::add_secret \
    "${vault_name}" \
    "${ADFS_DISCOVERY_URI}" \
    "${TEMPORARY_SECRET}"
else
  echo "Key ${ADFS_DISCOVERY_URI} exists in the secret store"
fi
